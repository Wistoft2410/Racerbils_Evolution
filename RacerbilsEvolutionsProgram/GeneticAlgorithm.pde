class GeneticAlgorithm {
  final float CONSTANT = 100; // TODO: Hvad skal denne her v칝rdi indeholde?

  // Denne variabel fort칝ller antallet af hvor mange frames
  // den genetiske algoritme skal vente med at k칮re p친 populationen.
  // Grunden til at vi venter, er s친 bilerne har tid til at k칮re rundt
  // og have en chance, s친 deres fitness v칝rdi kan udregnes retf칝rdigt

  
  public void naturalSelection() {
    // Hvis der er l칮bet antallet af frames som FRAMESTOWAIT indeholder
    // s친 vil algoritmens funktionalitet k칮re
    if (frameCount % FRAMESTOWAIT == 0) {
      println("Efter " + FRAMESTOWAIT + " frames har vi udviklet en ny generation!");
      calculateFitnessValue();

      carSystem.CarControllerList = mating(matingPool());
    }
  }

  private void calculateFitnessValue() {
    // Vi looper igennem hver CarController og henter 3 forskellige variabler og laver fitness v칝rdi udregningen
    for (CarController carController : carSystem.CarControllerList) {
      int clockWiseRotationFrameCounter = (int) carController.sensorSystem.clockWiseRotationFrameCounter;
      int whiteSensorFrameCount = carController.sensorSystem.whiteSensorFrameCount;
      // Et problem med denne v칝rdi er at den faktisk godt kan blive meget lav, ved brug af snyd.
      // Bilerne kan jo k칮re den modsatte vej 游땜
      int lapTimeInFrames = carController.sensorSystem.lapTimeInFrames;

      // Her laver vi selve udregningen af hver bils fitness v칝rdi.
      // Denne udregning tager hensyn til alle variabler der siger noget om hvor godt bilen "performer".
      // Vi l칝gger 1 til n칝vneren og derfor bliver vi ogs친 n칮dt til at l칝gge 1 til t칝lleren s친 det bliver p칝nt.
      // Grunden til at vi g칮r det er fordi at whiteSensorFrameCount og lapTimeInFrames kan jo v칝re 0. Og man
      // kan jo ikke dividere med 0 s친 derfor l칝gger vi 1 for en sikkerheds skyld!
      // Vi l칝gger ogs친 3x FRAMESTOWAIT til s친 vi sikrer os at fitnessValue aldrig kommer under 0, i l칮bet af en generation!
      // fitnessValue kan mindst blive 1!
      int fitnessValue = (clockWiseRotationFrameCounter + FRAMESTOWAIT * 3 + 1) / (whiteSensorFrameCount + lapTimeInFrames + 1);

      // Her s칝tter vi carControllerens fitness v칝rdi:
      carController.fitnessValue = fitnessValue;
    }
  }

  private ArrayList<CarController> matingPool() {
    ArrayList<CarController> matingPool = new ArrayList<CarController>();

    int sumOfFitnessValues = 0;

    for (CarController carController : carSystem.CarControllerList) sumOfFitnessValues += carController.fitnessValue;

    for (CarController carController : carSystem.CarControllerList) {
      int numberOfClones = ceil(((float) carController.fitnessValue / (float) sumOfFitnessValues) * CONSTANT);

      for (int i = 0; i < numberOfClones; i++) matingPool.add(carController);
    }

    return matingPool;
  }

  private ArrayList<CarController> mating(ArrayList<CarController> matingPool) {
    ArrayList<CarController> newGeneration = new ArrayList<CarController>();

    for (int i = 0; i < populationSize; i++) {
      CarController parent1 = matingPool.get((int) random(matingPool.size()));
      CarController parent2 = matingPool.get((int) random(matingPool.size()));

      CarController child = crossOver(parent1, parent2);
			mutation(child);

      newGeneration.add(child);
    }

    return newGeneration;
  }

  private CarController crossOver(CarController parent1, CarController parent2) {
    CarController carController = new CarController();
    NeuralNetwork hjerne = carController.hjerne;

    // Tage f칮rste halvdel af den f칮rste for칝ldres gener
    for (int i = 0; i < hjerne.weights.length / 2; i++) hjerne.weights[i] = parent1.hjerne.weights[i];

    // Tage anden halvdel af den anden for칝ldres gener
    for (int i = hjerne.weights.length / 2; i < hjerne.weights.length; i++) hjerne.weights[i] = parent2.hjerne.weights[i];

    // Tage f칮rste bias fra den f칮rste for칝ldre
    hjerne.biases[0] = parent1.hjerne.biases[0];
    // Tage gennemsnittet af for칝ldrenes midterbias
    hjerne.biases[1] = (parent1.hjerne.biases[1] + parent2.hjerne.biases[1]) / 2;
    // Tage trejde bias fra den anden for칝ldre
    hjerne.biases[2] = parent2.hjerne.biases[2];

    return carController;
  }

  private void mutation(CarController child) {
    // Vi 칝ndrer alle hjernens v칝gte med en tilf칝ldig v칝rdi mellem -child.varians, og child.varians (eksklusiv).
    // Dog kun med en sandsynlighed p친 1%:
    for (int i = 0; i < child.hjerne.weights.length; i++) {
      if ((int) random(1, 101) == 50) {
        child.hjerne.weights[i] = random(-child.varians, child.varians);
      }
    }

    // Vi g칮r pr칝cis det samme bare for biases:
    for (int i = 0; i < child.hjerne.biases.length; i++) {
      if ((int) random(1, 101) == 50) {
        child.hjerne.biases[i] = random(-child.varians, child.varians);
      }
    }
  }
}
